// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts    Post[]
  comments Comment[]
  votes    Vote[]

  @@map("users")
}

model Post {
  id           String   @id @default(cuid())
  userId       String
  beforeBelief String   @db.Text
  afterBelief  String   @db.Text
  categories   String[]
  isArchived   Boolean  @default(false)
  archivedAt   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  votes    Vote[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String   @db.Text
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post     Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   Comment?   @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[]  @relation("CommentReplies")

  @@map("comments")
}

model Vote {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  type      VoteType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Ensure one vote per user per post per type category
  @@unique([postId, userId, type])
  @@map("votes")
}

enum VoteType {
  BEFORE_UP
  BEFORE_DOWN
  AFTER_UP
  AFTER_DOWN
}
