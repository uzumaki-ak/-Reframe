generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  posts     Post[]
  votes     Vote[]

  @@map("users")
}

model Post {
  id           String    @id @default(cuid())
  userId       String
  beforeBelief String
  afterBelief  String
  categories   String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isArchived   Boolean   @default(false)
  archivedAt   DateTime?
  comments     Comment[]
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes        Vote[]

  @@map("posts")
}

model Comment {
  id        String    @id @default(cuid())
  postId    String
  userId    String
  content   String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Vote {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      VoteType
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId, type])
  @@map("votes")
}

enum VoteType {
  BEFORE_UP
  BEFORE_DOWN
  AFTER_UP
  AFTER_DOWN
}
